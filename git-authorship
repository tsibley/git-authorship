#!/bin/bash
# usage: git authorship [<revision>] [-- <paths...>]
#
# Summarizes authorship of a repository by the current number of lines.
#
# This is a more fine-grained version of `git shortlog -ns`, which counts
# commits instead of lines.
#
# Provide a revision to use a specific point-in-time instead of the current
# HEAD.  Provide paths to limit to a set of files or directories.

set -e -o pipefail

main() {
    if [[ $1 == "-h" || $1 == "--help" ]]; then
        usage; exit
    fi

    # Pull the first revision out of the args, if any.  Default to HEAD.
    local revision="$(git rev-parse --revs-only "$@" | head -n1)"
    : "${revision:=HEAD}"

    # Pull flags out of the args, if any.
    local blame_opts="$(git rev-parse --no-revs --flags "$@")"

    # Remove any revisions and flags from the front of args.  What remains
    # should be files.
    eval "set -- $(git rev-parse --sq --no-revs --no-flags "$@")"

    list-files "$@" | annotate | summarize
}

usage() {
    perl -ne '2 .. not s/^# ?// ? print : exit' -- "$0"
}

list-files() {
    git ls-tree -r --name-only -z "$revision" -- "$@"
}

annotate() {
    # I was somewhat surprised to find that a simple read loop is much faster
    # than using GNU Parallel with line buffering (which we need).  This was
    # reliably demonstrated on the Viroverse repository (over 220k lines) on my
    # personal laptop, which has 4 cores, 8GB RAM, and an SSD.  It makes for
    # less deps too, which is nice as GNU Parallel can sometimes be hard to
    # come by with distro packages.

    while read -r -d $'\0' fname; do
        git blame -CCC -M --line-porcelain $blame_opts "$revision" -- "$fname"
    done
}

summarize() {
    perl -MList::Util=max,sum -ne '
        next unless s/^author //;
        chomp;

        $authors{ $_ }++;

        END {
            my $length = 1 + max map { length } values %authors;
            my $total  = sum values %authors;

            printf "%*d  %3.0f%%  %s\n", $length, $authors{$_}, $authors{$_} / $total * 100, $_
                for sort { $authors{$b} <=> $authors{$a} }
                    keys %authors;
        }
    '
}

main "$@"
