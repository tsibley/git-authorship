#!/bin/bash
# usage: git authorship [<options>] [<revision>] [-- <paths...>]
#
# Summarizes authorship of a repository by the current number of lines.
#
# This is a more fine-grained version of `git shortlog -ns`, which counts
# commits instead of lines.
#
# Provide a revision to use a specific point-in-time instead of the current
# HEAD.  Provide paths to limit to a set of files or directories.  You may
# exclude certain paths by prefixing them with a ! (bang).  Note that paths are
# actually basic globs as interpreted by git ls-tree and bash pattern matching.
#
# Any options provided are passed to git blame, although only one makes sense:
#
#    -w    ignore whitespace when tracing the origins of lines
#
# This is useful to avoid attributing whitespace-only changes to people.

set -e -o pipefail
shopt -s extglob

main() {
    if [[ $1 == "-h" || $1 == "--help" ]]; then
        usage; exit
    fi

    # Pull the first revision out of the args, if any.  Default to HEAD.
    local revision="$(git rev-parse --revs-only "$@" | head -n1)"
    : "${revision:=HEAD}"

    # Pull flags out of the args, if any.
    local blame_opts="$(git rev-parse --no-revs --flags "$@")"

    # Remove any revisions and flags from the front of args.  What remains
    # should be files.
    eval "set -- $(git rev-parse --sq --no-revs --no-flags "$@")"

    list-files "$@" | annotate | summarize
}

usage() {
    perl -ne '2 .. not s/^# ?// ? print : exit' -- "$0"
}

list-files() {
    # Any files (patterns) prefixed with a bang (!) are exclusion prefixes that
    # should be removed from the output of git ls-tree.
    local -a include exclude

    for pattern; do
        case "$pattern" in
            !*)
                exclude+=("${pattern#\!}")
                shift;;
            *)
                include+=("$pattern")
                shift;;
        esac
    done

    git ls-tree -r --name-only -z "$revision" -- "${include[@]}" \
        | exclude-files "${exclude[@]}"
}

exclude-files() {
    # Supports globbing, like git ls-tree.  All patterns must match the full
    # path.  Patterns ending in / automatically have a * appended so as to
    # exclude the whole subtree.  This parallels the behaviour of included path
    # patterns with git ls-tree's -r option.
    if [[ $# -eq 0 ]]; then
        cat
    else
        local patterns="$(join '|' "${@/%\//\/*}")"

        while IFS="" read -r -d $'\0' fname; do
            if [[ $fname != @($patterns) ]]; then
                printf '%s\0' "$fname"
            fi
        done
    fi
}

join() {
    local IFS="$1"
    shift
    echo "$*"
}

annotate() {
    # I was somewhat surprised to find that a simple read loop is much faster
    # than using GNU Parallel with line buffering (which we need).  This was
    # reliably demonstrated on the Viroverse repository (over 220k lines) on my
    # personal laptop, which has 4 cores, 8GB RAM, and an SSD.  It makes for
    # less deps too, which is nice as GNU Parallel can sometimes be hard to
    # come by with distro packages.

    while IFS="" read -r -d $'\0' fname; do
        git blame -CCC -M --line-porcelain $blame_opts "$revision" -- "$fname"
    done
}

summarize() {
    perl -MList::Util=max,min,sum -ne '
        next unless s/^author //;
        chomp;

        $authors{ $_ }++;

        END {
            my $total = sum values %authors;

            my $max_length = max map { length } values %authors;
            my $min_length = min map { length } values %authors;

            my $magnitude_diff = $max_length - $min_length;

            my $precision = $magnitude_diff >= 3
                ? $magnitude_diff - 3 + 1
                : 0;

            my $min_width = $precision > 0
                ? 3 + $precision + 1        # + 1 for the decimal point
                : 3;

            printf " %*d  %*.*f%%  %s\n", $max_length, $authors{$_}, $min_width, $precision, $authors{$_} / $total * 100, $_
                for sort { $authors{$b} <=> $authors{$a} }
                    keys %authors;
        }
    '
}

main "$@"
